<?php

/**
 * @file
 * Hooks for giv din stemme module.
 *
 * @todo Create Helper for these hooks.
 */

use Drupal\ckeditor5\Plugin\CKEditor5PluginDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Symfony\Component\HttpFoundation\BinaryFileResponse;

/**
 * Implements hook_theme().
 */
function giv_din_stemme_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'landing_page' => [
      'variables' => [
        'values' => NULL,
        'front_page_text' => NULL,
      ],
      'template' => 'landing-page',
    ],
    'consent_page' => [
      'variables' => [
        'consent_text' => NULL,
      ],
      'template' => 'consent-page',
    ],
    'giv_din_stemme_profile_form' => [
      'render element' => 'giv-din-stemme-profile-form',
    ],
    'permissions_page' => [
      'variables' => [
        'permissions_help_page_node' => NULL,
      ],
      'template' => 'permissions-page',
    ],
    'test_page' => [
      'variables' => [
        'require_additional_microphone_permissions' => NULL,
        'additional_microphone_permissions_help_url' => NULL,
      ],
      'template' => 'test-page',
    ],
    'donate_page' => [
      'variables' => [
        'donate_page_text' => NULL,
      ],
      'template' => 'donate-page',
    ],
    'read_page' => [
      'variables' => [
        'textToRead' => '',
        'currentText' => '',
        'totalTexts' => '',
      ],
      'template' => 'read-page',
    ],
    'thank_you_page' => [
      'variables' => [
        'thank_you_text' => NULL,
      ],
      'template' => 'thank-you-page',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function giv_din_stemme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form__' . $variables['element']['#form_id'];
  };
}

/**
 * Implements hook_form_FORMID_alter().
 */
function giv_din_stemme_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add redirect submit handler.
  $form['actions']['submit']['#submit'][] = 'giv_din_stemme_redirect';

  // Style submit button.
  $form['actions']['submit']['#attributes']['fa-icon'] = 'fa-solid fa-circle-arrow-right';
  $form['actions']['submit']['#value'] = new TranslatableMarkup('Continue');

  $currentUser = \Drupal::currentUser();

  // Disable access to form elements.
  if (!in_array('editor', $currentUser->getRoles()) && $currentUser->id() !== '1') {
    $form['account']['#access'] = FALSE;
  }

  $form['actions']['delete']['#access'] = FALSE;
  $form['path']['#access'] = FALSE;
  $form['language']['#access'] = FALSE;

  // Move actions to footer.
  $form['footer'] = [
    '#type' => 'html_tag',
    '#tag' => 'footer',
    '#attributes' => [
      'class' => 'footer grid bg-gray-100 -mx-5 px-3 py-5 col-span-2 justify-end basis-full',
    ],
    '#weight' => '100',
  ];
  $form['footer']['actions'] = $form['actions'];
  unset($form['actions']);
}

/**
 * Custom submit handler.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The state of the form.
 */
function giv_din_stemme_redirect(array &$form, FormStateInterface $form_state) {
  $form_state->setRedirect('giv_din_stemme.permissions');
}

/**
 * Implements hook_ckeditor5_plugin_info_alter().
 */
function giv_din_stemme_ckeditor5_plugin_info_alter(array &$plugin_definitions) : void {
  assert($plugin_definitions['ckeditor5_link'] instanceof CKEditor5PluginDefinition);

  $link_plugin_definition = $plugin_definitions['ckeditor5_link']
    ->toArray();

  // Add manual target blank option on links.
  $link_plugin_definition['ckeditor5']['config']['link']['decorators'][] = [
    'mode' => 'manual',
    'label' => t('Open in new window'),
    'attributes' => [
      'target' => '_blank',
    ],
  ];

  $plugin_definitions['ckeditor5_link'] = new CKEditor5PluginDefinition($link_plugin_definition);
}

/**
 * Implements hook_file_download().
 *
 * @todo Move to helper.
 */
function giv_din_stemme_file_download($uri) {

  // Make sure access is done through use of Api key.
  if (isset($_SERVER['HTTP_API_KEY'])) {
    // @todo Check api key for match and get user.
    // @todo Create role and make check on users role.
    // Download file.
    $files = \Drupal::entityTypeManager()
      ->getStorage('file')
      ->loadByProperties(['uri' => $uri]);
    /** @var \Drupal\file\FileInterface|null $file */
    $file = reset($files) ?: NULL;

    if ($file) {
      $headers = file_get_content_headers($file);
      $headers['Content-Disposition'] = 'attachment; filename=' . \Drupal::service('file_url_generator')
        ->generateAbsoluteString($uri);

      new BinaryFileResponse($uri, 200, $headers);
    }

  }
}
